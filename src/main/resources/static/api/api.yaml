openapi: 3.1.0
info:
  title: Shopping List Main Service
  version: 1.0.0

paths:

  /v1/shoppingLists/{userId}:
    get:
      operationId: getShoppingListsForUser
      summary: Retrieve all shopping lists for user.
      description: Retrieve all shopping lists that were created by specified user.
      tags:
        - ShoppingLists
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string
      responses:

        "200":
          description: Everything went fine
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shoppingList"

        "403":
          $ref: "#/components/responses/forbidden"

    post:
      operationId: createShoppingList
      summary: Create new shopping list for user.
      description: Create new shopping list for user by analyzing received recipes.
      tags:
        - ShoppingLists

      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string

      requestBody:
        description: |
          An object with two required fields:
          - Name for new shopping list
          - Array of recipes which will be used to create a shopping list.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/shoppingListCreate"

      responses:

        "201":
          description: The item has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shoppingList"

        "403":
          $ref: "#/components/responses/forbidden"

  /v1/shoppingLists/{userId}/{shoppingListId}:
    put:
      operationId: updateShoppingList
      summary: Update shopping list.
      description: Update existing shopping list that has been created by specified user.
      tags:
        - ShoppingLists
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string

        - name: shoppingListId
          in: path
          required: true
          description: The unique ID of the shopping list.
          schema:
            type: string

      requestBody:
        description: Updated shopping list
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/shoppingListBase"

      responses:

        "200":
          description: The item has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shoppingList"

        "403":
          $ref: "#/components/responses/forbidden"

        "404":
          $ref: "#/components/responses/notFound"

    delete:
      operationId: deleteShoppingList
      summary: Delete shopping list for user.
      description: Delete existing shopping list that has been created by specified user.
      tags:
        - ShoppingLists
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string

        - name: shoppingListId
          in: path
          required: true
          description: The unique ID of the shopping list.
          schema:
            type: string

      responses:

        "200":
          description: The item has been deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shoppingList"

        "403":
          $ref: "#/components/responses/forbidden"

        "404":
          $ref: "#/components/responses/notFound"

  /v1/recipes/{userId}:
    get:
      operationId: getRecipesForUser
      summary: Retrieve all recipes for user.
      description: Retrieve all recipes that were created by specified user.
      tags:
        - Recipes
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string
      responses:

        "200":
          description: Everything went fine
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/recipe"

        "403":
          $ref: "#/components/responses/forbidden"

    post:
      operationId: createRecipesForUser
      summary: Create new recipe for user.
      description: Create new recipe for user.
      tags:
        - Recipes
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string
      requestBody:
        description: Newly created recipe
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/recipeBase"
      responses:

        "201":
          description: The item has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/recipe"

        "403":
          $ref: "#/components/responses/forbidden"

  /v1/recipes/{userId}/{recipeId}:
    delete:
      operationId: removeRecipesForUser
      summary: Remove recipe for user.
      description: Remove existing recipe that has been created by specified user.
      tags:
        - Recipes
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string

        - name: recipeId
          in: path
          required: true
          description: The unique ID of the recipe.
          schema:
            type: string

      responses:

        "200":
          description: The item has been deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/recipe"

        "403":
          $ref: "#/components/responses/forbidden"

    put:
      operationId: updateRecipesForUser
      summary: Update recipe for user.
      description: Update existing recipe that has been created by specified user.
      tags:
        - Recipes
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string

        - name: recipeId
          in: path
          required: true
          description: The unique ID of the recipe.
          schema:
            type: string
      requestBody:
        description: Updated recipe
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/recipeBase"
      responses:

        "200":
          description: The item has been deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/recipe"

        "403":
          $ref: "#/components/responses/forbidden"


  /v1/recipes/publicRecipes:
    get:
      operationId: getPublicRecipes
      summary: Retrieve all public recipes.
      description: Retrieve all recipes that are public.
      tags:
        - Recipes
      responses:

        "200":
          description: Everything went fine
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/recipe"

  /v1/constants/units:
    get:
      operationId: getAllUnits
      tags:
        - Constants
      summary: Retrieve all units.
      responses:

        "200":
          description: Everything went fine
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /v1/constants/categories:
    get:
      operationId: getAllCategories
      tags:
        - Constants
      summary: Retrieve all categories.
      responses:

        "200":
          description: Everything went fine
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

components:

  schemas:

    shoppingList:
      allOf:
        - $ref: "#/components/schemas/shoppingListBase"
        - type: object
          required:
            - shoppingListId
          properties:
            shoppingListId:
              type: string

    shoppingListBase:
      type: object
      required:
        - name
        - updatedAt
        - createdAt
        - itemsPerCategory
      properties:
        name:
          type: string
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        itemsPerCategory:
          type: array
          items:
            $ref: "#/components/schemas/categorizedItems"

    categorizedItems:
      type: object
      required:
        - category
        - items
      properties:
        category:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/shoppingListItem"

    shoppingListItem:
      type: object
      required:
        - name
        - quantity
        - unit
        - purchased
      properties:
        name:
          type: string
        quantity:
          type: number
          format: float
        unit:
          type: string
        purchased:
          type: boolean

    recipe:
      allOf:
        - $ref: "#/components/schemas/recipeBase"
        - type: object
          required:
            - recipeId
          properties:
            recipeId:
              type: string

    recipeBase:
      type: object
      required:
        - name
        - updatedAt
        - createdAt
        - items
      properties:
        name:
          type: string
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: "#/components/schemas/recipeItem"

    recipeItem:
      type: object
      required:
        - name
        - quantity
        - unit
        - category
      properties:
        name:
          type: string
        quantity:
          type: number
          format: float
        unit:
          type: string
        category:
          type: string

    shoppingListCreate:
      type: object
      required:
        - name
        - userRecipeIds
        - publicRecipeIds
      properties:
        name:
          type: string
        userRecipeIds:
          type: array
          items:
            type: string
        publicRecipeIds:
          type: array
          items:
            type: string

  responses:
    forbidden:
      description: "The client doesn't have access rights to the content"
      content:
        application/json:
          schema:
            type: string

    notFound:
      description: "The requested resource could not be found"
      content:
        application/json:
          schema:
            type: string

    unauthenticated:
      description: "The client is not authenticated."
      content:
        application/json:
          schema:
            type: string

    alreadyExists:
      description: "The resource already exists."
      content:
        application/json:
          schema:
            type: string

